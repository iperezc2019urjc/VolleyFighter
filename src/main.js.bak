var fondo;
		var IreneMerkel;
		var CesarAugusto;
		var plataformaIZQ;
		var plataformaDER;
		var objInvisible;
		var marcadorJ1 = 0;
		var textoMarcadorJ2;
		var marcadorJ2 = 0;
		var textoMarcadorJ1;
		var redes;
		var pelota;
		var textoTiempo;
		var tiempoDeJuego;
		var puedeSaltar = true;
		var timedEvent;

		function onEvent ()
			{
				if(marcadorJ1 > marcadorJ2)
				{
				victoriaJ1 = this.add.text(200, 216, 'HA GANADO EL JUGADOR 1', { fontSize: '75px', fill: '#000' });
				}else if(marcadorJ1 < marcadorJ2)
				{
				victoriaJ2 = this.add.text(200, 216, 'HA GANADO EL JUGADOR 2', { fontSize: '75px', fill: '#000' });
				}else{
				empate = this.add.text(540, 216, 'EMPATE', { fontSize: '100px', fill: '#000' });
				}
				pelota.disableBody(true,true);
			}
			
		function nopoderSaltar (IreneMerkel, objInvisible) 
			{
				puedeSaltar = false;
			}
			
		function poderSaltar () 
			{
				puedeSaltar = true;
			}
			
		function contactoJ1(IreneMerkel, pelota)
			{
				IreneMerkel.body.immovable = true;
			}
			
		function contactoJ2(CesarAugusto, pelota)
			{
				CesarAugusto.body.immovable = true;
			}
		function player1HitBall (IreneMerkel, pelota)
			{
				pelota.setVelocity(250, -700);
			}
			
		function player2HitBall (CesarAugusto, pelota)
			{
				pelota.setVelocity(-250, -700);
			}
			
			
			//Colision bola y plataformas izquierda
		function ballScore (pelota, plataformaIZQ)
			{
				marcadorJ2 += 1;
				textoMarcadorJ2.setText('Puntuación: ' + marcadorJ2);
				
				pelota.setPosition(700,50);
				pelota.setVelocity(-350, -100);
				
			}
			
			//Colision bola y plataformas derecha
		function ballScore2 (pelota, plataformaDER)
			{
				marcadorJ1 += 1;
				textoMarcadorJ1.setText('Puntuación: ' + marcadorJ1);
				
				pelota.setPosition(700,50);
				pelota.setVelocity(350, -100);
				
			}
/////////////////////////////////ESCENA DE PRECARGA/////////////////////////
class PreCarga extends Phaser.Scene
{
	constructor ()
    {
        super({key: 'PreCarga'});
    }
	
	preload ()
    {
		this.load.image('escenario', 'assets/sky.png');
	}
	
	create()
	{
		this.add.image(400, 300, 'escenario').setScale(3.5);
		this.add.text(300, 400, 'Click to Start', { fontSize: '32px', fill: '#000' });
        this.input.once('pointerdown', () => {
            this.scene.start('EscenaInicio');
        });
		
	}
}

/////////////////////////////////ESCENA DE INICIO/////////////////////////
class EscenaInicio extends Phaser.Scene
{
    constructor ()
    {
        super({key: 'EscenaInicio'});
    }
	
	preload ()
    {
		this.load.image('escenario', 'assets/sky.png');
	}
	
    create ()
    {	
		this.add.image(400, 300, 'escenario').setScale(3.5);
		this.add.text(300, 400, 'Click to Play', { fontSize: '32px', fill: '#000' });
        this.input.once('pointerdown', () => {
            this.scene.start('EscenaJuego');
        });
    }
}


/////////////////////////////////ESCENA DE JUEGO/////////////////////////
class EscenaJuego extends Phaser.Scene
{
    constructor ()
    {
        super({key: 'EscenaJuego'});

    }
		
		
	preload ()
	{
		this.load.image('escenario', 'assets/sky.png');
		this.load.image('suelo', 'assets/platform.png');
		this.load.spritesheet('jugador1', 'assets/IreneMerkel.png',
									{ frameWidth: 32, frameHeight: 48 });
		this.load.spritesheet('jugador2', 'assets/CesarAugusto.png',
									{ frameWidth: 32, frameHeight: 48 });
		this.load.image('balon', 'assets/wizball.png');
		this.load.image('redV', 'assets/red.png');
		this.load.image('objInvisible', 'assets/objInvisible.png');
													
	}
			
    create ()
    {
        //////////////////////////CREACIÓN DEL FONDO///////////////////////
				this.add.image(400, 300, 'escenario').setScale(3.5);;
				
				//////////////////////////CREACIÓN DE LAS PLATAFORMAS///////////////////////
				plataformaIZQ = this.physics.add.staticGroup();
				plataformaDER = this.physics.add.staticGroup();
				redes = this.physics.add.staticGroup();
				objInvisible = this.physics.add.staticGroup();
				//redColision = this.physics.add.sprite(700,1000,'redColision');
				
				plataformaIZQ.create(98, 790, 'suelo').setScale(3).refreshBody();
				plataformaDER.create(1302, 790, 'suelo').setScale(3).refreshBody();
				redes.create(700,1000, 'redV').setScale(1).refreshBody();
				objInvisible.create(0,250, 'objInvisible').setScale(8).refreshBody();
				
				
				//////////////////////////CREACIÓN DEL PERSONAJE 1///////////////////////
				//redColision = this.physics.add.sprite(700,1000,'redColision');
				IreneMerkel = this.physics.add.sprite(100, 450, 'jugador1');
				IreneMerkel.setScale(2.5)
				IreneMerkel.setCollideWorldBounds(true);

				this.anims.create({
					key: 'left1',
					frames: this.anims.generateFrameNumbers('jugador1', { start: 0, end: 3 }),
					frameRate: 10,
					repeat: -1
				});

				this.anims.create({
					key: 'turn1',
					frames: [ { key: 'jugador1', frame: 4 } ],
					frameRate: 20
				});

				this.anims.create({
					key: 'right1',
					frames: this.anims.generateFrameNumbers('jugador1', { start: 5, end: 8 }),
					frameRate: 10,
					repeat: -1
				});
				
				
				//////////////////////////CREACIÓN DEL PERSONAJE 2///////////////////////
				CesarAugusto = this.physics.add.sprite(1300, 450, 'jugador2');
				CesarAugusto.setScale(2.5)
				CesarAugusto.setCollideWorldBounds(true);

				this.anims.create({
					key: 'left2',
					frames: this.anims.generateFrameNumbers('jugador2', { start: 0, end: 3 }),
					frameRate: 10,
					repeat: -1
				});

				this.anims.create({
					key: 'turn2',
					frames: [ { key: 'jugador2', frame: 4 } ],
					frameRate: 20
				});

				this.anims.create({
					key: 'right2',
					frames: this.anims.generateFrameNumbers('jugador2', { start: 5, end: 8 }),
					frameRate: 10,
					repeat: -1
				});
				
				
				//////////////////////////CREACIÓN DE LA BOLA///////////////////////
				pelota = this.physics.add.image(700, 50, 'balon');
				pelota.setCircle(46);
				pelota.setCollideWorldBounds(true);
				pelota.setBounce(1);
				pelota.setVelocity(-350, 0);
				
				
				//////////////////////////CREACIÓN DEL MARCADOR///////////////////////
				textoMarcadorJ1 = this.add.text(16, 16, 'Puntuación: 0', { fontSize: '32px', fill: '#000' });
				textoMarcadorJ2 = this.add.text(1110, 16, 'Puntuación: 0', { fontSize: '32px', fill: '#000' });


				//////////////////////////TIEMPO DE JUEGO///////////////////////
				textoTiempo = this.add.text(450, 16, 'Tiempo para finalizar', { fontSize: '32px', fill: '#000' });
				timedEvent = this.time.delayedCall(100000, onEvent, [], this);
				//100000 - 1min 40 seg
			
				//////////////////////////DETECCIÓN DE COLISIONES///////////////////////
				this.physics.add.overlap(IreneMerkel, objInvisible, nopoderSaltar, null, this);
				this.physics.add.collider(IreneMerkel, plataformaIZQ, poderSaltar, null, this);
				//this.physics.add.overlap(IreneMerkel, redColision);
				this.physics.add.collider(IreneMerkel, plataformaIZQ);
				this.physics.add.collider(IreneMerkel, plataformaDER);
				this.physics.add.collider(IreneMerkel, pelota, contactoJ1, null, this);
				this.physics.add.collider(IreneMerkel, redes);
				this.physics.add.overlap(CesarAugusto, objInvisible, nopoderSaltar, null, this);
				this.physics.add.collider(CesarAugusto, plataformaIZQ, poderSaltar, null, this);
				this.physics.add.collider(CesarAugusto, plataformaIZQ);
				this.physics.add.collider(CesarAugusto, plataformaDER);
				this.physics.add.collider(CesarAugusto, pelota, contactoJ2, null, this);
				this.physics.add.collider(CesarAugusto, redes);
				this.physics.add.collider(pelota, plataformaIZQ);
				this.physics.add.collider(pelota, plataformaDER);
				this.physics.add.collider(pelota, redes);
				this.physics.add.collider(IreneMerkel, pelota, player1HitBall, null, this);
				this.physics.add.collider(CesarAugusto, pelota, player2HitBall, null, this);
				this.physics.add.overlap(pelota, plataformaIZQ, ballScore, null, this);
				this.physics.add.overlap(pelota, plataformaDER, ballScore2, null, this);
    }

    update ()
			{	
				//redColision.body.immovable = true;
				//Tiempo de juego
				textoTiempo.setText('Tiempo para finalizar: ' + (3-timedEvent.getProgress().toString().substr(0, 5)));
				
				//Control del jugador 1
				this.input.keyboard.on("keydown_A", () => {
					IreneMerkel.setVelocityX(-300);

					IreneMerkel.anims.play('left1', true);
				});
				this.input.keyboard.on("keydown_D", () => {
					IreneMerkel.setVelocityX(300);

					IreneMerkel.anims.play('right1', true);
				});
				this.input.keyboard.on("keyup_A", () => {
					IreneMerkel.setVelocityX(0);

					IreneMerkel.anims.play('turn1');
				});
				this.input.keyboard.on("keyup_D", () => {
					IreneMerkel.setVelocityX(0);

					IreneMerkel.anims.play('turn1');
				});
				
				this.input.keyboard.on("keyup_W", () => {
					if(puedeSaltar === true){
						IreneMerkel.setVelocityY(-430);
					}
				});
				
				this.input.keyboard.on("keydown_S", () => {
				   //Accion de la habiliad especial al pulsar S
				   CesarAugusto.setVelocity(150, -800)
				});
				
				
				//Control del jugador 2
				this.input.keyboard.on("keydown_J", () => {
					CesarAugusto.setVelocityX(-300);

					CesarAugusto.anims.play('left2', true);
				});
				this.input.keyboard.on("keydown_L", () => {
					CesarAugusto.setVelocityX(300);

					CesarAugusto.anims.play('right2', true);
				});
				this.input.keyboard.on("keyup_J", () => {
					CesarAugusto.setVelocityX(0);

					CesarAugusto.anims.play('turn2');
				});
				this.input.keyboard.on("keyup_L", () => {
					CesarAugusto.setVelocityX(0);

					CesarAugusto.anims.play('turn2');
				});
				this.input.keyboard.on("keyup_I", () => {
					if(puedeSaltar === true){
						CesarAugusto.setVelocityY(-430);
					}
				});
				this.input.keyboard.on("keydown_K", () => {
				   //Accion de la habiliad especial al pulsar K
				});
			}
			
			
			
			
			
}

			
/////////////////////////////////CONFIGURACION Y CARGA DE LAS ESCENAS/////////////////////////
const config = {
    type: Phaser.AUTO,
    width: 1400,
	height: 750,
	physics: {
		default: 'arcade',
		arcade: {
			gravity: { y: 500 },
			debug: false
				}
			},
    parent: 'phaser-example',
    scene: [ PreCarga, EscenaInicio, EscenaJuego ],
};

let game = new Phaser.Game(config);
